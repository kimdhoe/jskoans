// Array는 꺽쇠 괄호로 만들 수 있습니다.
//   - [], [ 0, 1, 2 ]
check.isArray(_____)

// SEP

// 원소의 위치를 알고 있으면 한번에 값을 가져올 수 있습니다.
const array = [ 1, 3, 5 ]

check.equal(array[0], 1)
check.equal(array[1], _____)
check.equal(array[2], 5)

// SEP

// 원소의 개수를 비용 없이 알 수 있습니다.
const array = [ 1, 2, 3, 4, 5 ]

check.equal(array.length, _____)

// SEP

// array의 일부를 복제할 수 있습니다.
const array = [ 1, 2, 3, 4, 5 ]

check.deepEqual(
    array.slice(1 , _____),
    [ 2, 3, 4 ]
)

// SEP

// 원소를 추가한 새로운 array를 만들 수 있습니다.
const array = [ 1, 2 ]

check.deepEqual(
    [0, ...array],
    _____
)

// SEP

// 만들어진 array의 맨 뒤에 값을 넣을 수 있습니다.
const array = [ 3, 5 ]

array.push(8)

check.deepEqual(
    array,
    _____,
    '새 값이 array의 마지막 원소가 됩니다'
)

// SEP

// 만들어진 array에서 값을 꺼낼 수 있습니다.
const array = [ 3, 5 ]

const x = array.pop()

check.strictEqual(x, 5, 'pop은 마지막 원소를 꺼냅니다')

check.deepEqual(array, _____)

// SEP

// 만들어진 array의 맨 앞에 값을 넣을 수 있습니다.
const array = [3, 5]

array.unshift(1)

check.deepEqual(
    array,
    _____,
    '새 값이 array의 첫 원소가 됩니다'
)

// SEP

// 만들어진 array에서 값을 꺼낼 수 있습니다.
const array = [ 3, 5 ]

const x = array.shift()

check.strictEqual(x, 3, 'shift는 첫 원소를 꺼냅니다')

check.deepEqual(array, _____)
