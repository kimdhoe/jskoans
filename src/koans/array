// Array는 꺽쇠 괄호[]로 만들 수 있습니다.
assert.isArray(_____)

// SEP

// 원소의 위치를 알고 있으면 한번에 값을 가져올 수 있습니다.
const array = [1, 3, 5]
assert.strictEqual(array[2], _____)

// SEP

// 원소의 개수를 비용 없이 알 수 있습니다.
assert.equal([1, 2, 3, 4, 5].length, _____)

// SEP

// array의 일부를 복제할 수 있습니다.
assert.deepEqual(
  [10, 11, 12, 13, 14].slice(1, 4),
  _____
)

// SEP

// 원소를 추가한 새로운 array를 만들 수 있습니다.
const array = [1, 2]
assert.deepEqual([0, ...array], _____)
assert.deepEqual(array, [1, 2])

// SEP

// 만들어진 array에 값을 더할 수 있습니다.
const array = [3, 5]
array.push(8)
assert.deepEqual(
    array,
    _____,
    '새 값이 array의 마지막 원소가 됩니다'
)

// SEP

// 만들어진 array에서 값을 빼낼 수 있습니다.
const array = [3, 5]
const x = array.pop()
assert.strictEqual(x, 5, '마지막 원소를 가져옵니다')
assert.deepEqual(array, _____)
