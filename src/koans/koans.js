/**
 * This file was auto-generated by makeKoans.js script.
 */
module.exports = [{"category":"assert","meditations":[{"description":["참과 거짓에 대해 고민해봅시다.","우리는 check를 이용해서 값들의 진실성을 검사해볼 것입니다."],"code":[{"hasInputField":true,"text":"check.isTrue(___false___)  // true로 바꾸세요."}]},{"description":["적절한 테스트 문구가 여러분을 이끌어줄 수 있습니다."],"code":[{"hasInputField":true,"text":"check.isFalse(_____, 'false여야 합니다')"}]},{"description":["현실을 이해하려면 실재와 우리의 기대를 비교해보아야만 합니다."],"code":[{"hasInputField":false,"text":"const actual = 1 + 1"},{"hasInputField":true,"text":"const expected = _____"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.equal(actual, expected)"}]}]},{"category":"truthiness","meditations":[{"description":["0을 제외한 모든 수는 참으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = -7 ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]},{"description":["0은 거짓으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = 0 ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]},{"description":["빈 문자열은 거짓으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = '' ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]},{"description":["null은 거짓으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = null ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]},{"description":["undefined는 거짓으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = undefined ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]},{"description":["NaN은 거짓으로 칩니다."],"code":[{"hasInputField":false,"text":"const trueOrFalse = NaN ? true : false"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.strictEqual(trueOrFalse, _____)"}]}]},{"category":"equality","meditations":[{"description":["두 수가 같은지 확인할 수 있습니다."],"code":[{"hasInputField":true,"text":"check.isTrue(4 + 1 === _____)"}]},{"description":["두 문자열이 같은지 확인할 수 있습니다."],"code":[{"hasInputField":true,"text":"check.isTrue('j' + 's' === _____)"}]},{"description":["===는 두 값이 같은지 형변환 없이 엄격하게 비교합니다."],"code":[{"hasInputField":false,"text":"check.isFalse(5 === '5')"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.isTrue("},{"hasInputField":true,"text":"    5 === ___'5'___,"},{"hasInputField":false,"text":"    '숫자 5와 정확히 같은 값이어야 합니다'"},{"hasInputField":false,"text":")"}]},{"description":["==로 종류가 다른 두 값을 비교할 때 형변환이 일어나기도 합니다."],"code":[{"hasInputField":false,"text":"check.isTrue(false == 0)"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.isTrue("},{"hasInputField":true,"text":"    5 == '_____',"},{"hasInputField":false,"text":"    '숫자 5와 같다고 칠 수 있는 문자열이어야 합니다'"},{"hasInputField":false,"text":"  )"}]},{"description":["두 객체가 똑같이 닮았다 해도 같은 객체일 수는 없습니다."],"code":[{"hasInputField":false,"text":"const object = { x: 0 }"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.isFalse({ x: 0 } === object)"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.isTrue("},{"hasInputField":true,"text":"    ___{ x: 0 }___ === object,"},{"hasInputField":false,"text":"    '객체는 그 자신과만 같을 수 있습니다'"},{"hasInputField":false,"text":")"}]},{"description":["하지만 많은 경우, 두 객체가 똑같이 닮았다면 그걸로 충분합니다."],"code":[{"hasInputField":true,"text":"check.deepEqual(_____, { x: 0 })"}]}]},{"category":"object","meditations":[{"description":["객체(Object)는 여러 개의 정보를 담을 수 있는 값입니다.","- {}, { x: 10, y: 20 }"],"code":[{"hasInputField":true,"text":"check.isObject(_____)"}]},{"description":["이름을 알면 객체 안의 정보를 가져올 수 있습니다."],"code":[{"hasInputField":false,"text":"const point = { x: 10, y: 20 }"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.equal(point.x, 10)"},{"hasInputField":true,"text":"check.equal(_____, 20)"}]},{"description":["꺽쇠괄호([])는 정보를 가져오는 더 유연한 방법입니다."],"code":[{"hasInputField":false,"text":"const person = {"},{"hasInputField":false,"text":"    firstName: 'Gil-dong',"},{"hasInputField":false,"text":"    lastName: 'Hong'"},{"hasInputField":false,"text":"}"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.equal("},{"hasInputField":false,"text":"    person['firstName'],"},{"hasInputField":false,"text":"    'Gil-dong',"},{"hasInputField":false,"text":"    '객체 안에 든 정보의 이름은 문자열입니다'"},{"hasInputField":false,"text":")"},{"hasInputField":false,"text":"check.equal("},{"hasInputField":true,"text":"    person[_____ + 'Name'],"},{"hasInputField":false,"text":"    'Hong',"},{"hasInputField":false,"text":"    '꺽쇠괄호 안에는 식이 들어갈 수 있습니다'"},{"hasInputField":false,"text":")"}]},{"description":["이미 만들어진 객체에 정보를 추가할 수 있습니다."],"code":[{"hasInputField":false,"text":"const point = { x: 100 }"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"point.y = 200"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.deepEqual(point, _____)"}]},{"description":["객체 안에 든 정보를 변형할 수 있습니다."],"code":[{"hasInputField":false,"text":"const point = { x: 1, y: 2 }"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"point.x = point.x + 1"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.deepEqual(point, _____)"}]},{"description":["다른 객체 안의 정보로 새 객체를 만들 수 있습니다."],"code":[{"hasInputField":false,"text":"const point1 = { x: 1, y: 2 }"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"const point2 = {"},{"hasInputField":false,"text":"    x: point1.x + 1,"},{"hasInputField":false,"text":"    y: point1.y + 1"},{"hasInputField":false,"text":"}"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.deepEqual(point2, _____)"}]}]},{"category":"array","meditations":[{"description":["Array는 꺽쇠 괄호로 만들 수 있습니다.","- [], [ 0, 1, 2 ]"],"code":[{"hasInputField":true,"text":"check.isArray(_____)"}]},{"description":["원소의 위치를 알고 있으면 한번에 값을 가져올 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 1, 3, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.equal(array[0], 1)"},{"hasInputField":true,"text":"check.equal(array[1], _____)"},{"hasInputField":false,"text":"check.equal(array[2], 5)"}]},{"description":["원소의 개수를 비용 없이 알 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 1, 2, 3, 4, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.equal(array.length, _____)"}]},{"description":["array의 일부를 복제할 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 1, 2, 3, 4, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.deepEqual("},{"hasInputField":true,"text":"    array.slice(1 , _____),"},{"hasInputField":false,"text":"    [ 2, 3, 4 ]"},{"hasInputField":false,"text":")"}]},{"description":["원소를 추가한 새로운 array를 만들 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 1, 2 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.deepEqual("},{"hasInputField":false,"text":"    [0, ...array],"},{"hasInputField":true,"text":"    _____"},{"hasInputField":false,"text":")"}]},{"description":["만들어진 array의 맨 뒤에 값을 넣을 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 3, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"array.push(8)"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.deepEqual("},{"hasInputField":false,"text":"    array,"},{"hasInputField":true,"text":"    _____,"},{"hasInputField":false,"text":"    '새 값이 array의 마지막 원소가 됩니다'"},{"hasInputField":false,"text":")"}]},{"description":["만들어진 array에서 값을 꺼낼 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 3, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"const x = array.pop()"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.strictEqual(x, 5, 'pop은 마지막 원소를 꺼냅니다')"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.deepEqual(array, _____)"}]},{"description":["만들어진 array의 맨 앞에 값을 넣을 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [3, 5]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"array.unshift(1)"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.deepEqual("},{"hasInputField":false,"text":"    array,"},{"hasInputField":true,"text":"    _____,"},{"hasInputField":false,"text":"    '새 값이 array의 첫 원소가 됩니다'"},{"hasInputField":false,"text":")"}]},{"description":["만들어진 array에서 값을 꺼낼 수 있습니다."],"code":[{"hasInputField":false,"text":"const array = [ 3, 5 ]"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"const x = array.shift()"},{"hasInputField":false,"text":""},{"hasInputField":false,"text":"check.strictEqual(x, 3, 'shift는 첫 원소를 꺼냅니다')"},{"hasInputField":false,"text":""},{"hasInputField":true,"text":"check.deepEqual(array, _____)"}]}]},{"category":"temp","meditations":[{"description":["test"],"code":[{"hasInputField":true,"text":"check.isTrue(_____)"}]}]}]