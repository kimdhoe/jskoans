// 객체(Object)는 여러 개의 정보를 담을 수 있는 값입니다.
//  - {}, { x: 10, y: 20 }
assert.isObject(_____)

// SEP

// 이름을 알면 객체 안의 정보를 가져올 수 있습니다.
const point = { x: 10, y: 20 }

assert.equal(point.x, 10)
assert.equal(_____, 20)

// SEP

// 꺽쇠괄호([])는 정보를 가져오는 더 유연한 방법입니다.
const person = {
    firstName: 'Gil-dong',
    lastName: 'Hong'
}

assert.equal(
    person['firstName'],
    'Gil-dong',
    '객체 안에 든 정보의 이름은 문자열입니다'
)
assert.equal(
    person[_____ + 'Name'],
    'Hong',
    '꺽쇠괄호 안에는 식이 들어갈 수 있습니다'
)

// SEP

// 이미 만들어진 객체에 정보를 추가할 수 있습니다.
const point = { x: 100 }

point.y = 200

assert.deepEqual(point, _____)


// SEP

// 객체 안에 든 정보를 변형할 수 있습니다.
const point = { x: 1, y: 2 }

point.x = point.x + 1

assert.deepEqual(point, _____)

// SEP

// 다른 객체 안의 정보로 새 객체를 만들 수 있습니다.
const point1 = { x: 1, y: 2 }

const point2 = {
    x: point1.x + 1,
    y: point1.y + 1
}

assert.deepEqual(point2, _____)
